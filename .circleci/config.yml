# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
# Thanks to https://github.com/nrwl/nx-examples/blob/master/.circleci/config.yml

version: 2.1

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/node:12-browsers

set_env: &set_env
  name: Setup Environment Variables
  command: |
    if [[ $CIRCLE_PULL_REQUEST ]]
    then
      echo 'Fetching Base Commit from GitHub'
      echo 'export CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}"' >> $BASH_ENV
      source $BASH_ENV
      echo "export CIRCLE_PR_BASE_SHA=`curl -s https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${CIRCLE_PR_NUMBER} | jq -r '.base.sha'`" >> $BASH_ENV
      echo 'export AFFECTED_ARGS="--base ${CIRCLE_PR_BASE_SHA}"' >> $BASH_ENV
    else
      echo 'Fetching Base Commit from Deploy Cache'
      if [[ ! -f dist/last-deploy.txt ]]
      then
        mkdir dist && git rev-parse HEAD~1 > dist/last-deploy.txt
      fi
      echo 'export AFFECTED_ARGS="--base $(cat dist/last-deploy.txt)"' >> $BASH_ENV
    fi
    source $BASH_ENV
    echo $AFFECTED_ARGS
yarn_cache: &yarn_cache
  keys:
    - node-deps-node12-{{ checksum "yarn.lock" }}
    # fallback to using the latest cache if no exact match is found
    - node-deps-node12-

deploy_cache: &deploy_cache
  key: last-deploy-sha

yarn_install: &yarn_install
  name: Install Dependencies
  command: yarn install --frozen-lockfile --non-interactive

commands:
  install_aws_tools:
    description: |
      Install the AWS CLI via pip.
    steps:
      - run:
          name: Install Python and Pip
          command: |
            sudo apt-get -y -qq install python3.5-dev
            sudo curl -O https://bootstrap.pypa.io/get-pip.py
            sudo python3.5 get-pip.py
      - run:
          name: Install AWS and AWS EB CLIs
          command: |
            export PIP=$(which pip pip3 | head -1)
            if [[ -n $PIP ]]; then
              if which sudo > /dev/null; then
                sudo $PIP install awscli awsebcli --upgrade
              else
                # This installs the AWS CLI to ~/.local/bin. Make sure that ~/.local/bin is in your $PATH.
                $PIP install aws --upgrade --user
              fi
            elif [[ $(which unzip curl | wc -l) -eq 2 ]]; then
              cd
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              if which sudo > /dev/null; then
                sudo ~/awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              else
                # This installs the AWS CLI to the default location (~/.local/lib/aws) and create a symbolic link (symlink) at ~/bin/aws. Make sure that ~/bin is in your $PATH.
                awscli-bundle/install -b ~/bin/aws
              fi
              rm -rf awscli-bundle*
              cd -
            else
              echo "Unable to install AWS CLI. Please install pip."
              exit 1
            fi

jobs:
  install:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *yarn_cache
      - run:
          <<: *yarn_install
      - save_cache:
          key: node-deps-node12-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache
            - node_modules
  check-formatting:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - run: yarn format:check ${AFFECTED_ARGS}
  lint:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - run: ./node_modules/.bin/nx workspace-lint
      - run: yarn affected:lint ${AFFECTED_ARGS} --parallel
  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - run: yarn affected:build -- ${AFFECTED_ARGS} --parallel --configuration production
      - save_cache:
          key: build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - dist
      - store_artifacts:
          path: dist
  test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - run: yarn affected:test -- ${AFFECTED_ARGS} --parallel -- --ci --code-coverage --maxWorkers=2
  e2e:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - run: yarn affected:e2e -- ${AFFECTED_ARGS} --configuration production -- --headless
      - store_artifacts:
          path: dist/cypress

  deploy:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/repo
      - install_aws_tools
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - restore_cache:
          key: build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - setup_remote_docker:
          version: 20.10.6
      - run: yarn affected -- --target deploy ${AFFECTED_ARGS} --maxWorkers=2
      - run: git rev-parse HEAD > dist/last-deploy.txt
      - save_cache:
          key: last-deploy-sha
          paths:
            - dist/last-deploy.txt

workflows:
  version: 2
  pr_check:
    jobs:
      - install
      - check-formatting:
          requires:
            - install
      - lint:
          requires:
            - install
      - test:
          requires:
            - install
      - build:
          requires:
            - install
      - e2e:
          requires:
            - install
      - deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - check-formatting
            - lint
            - test
            - build
            - e2e
